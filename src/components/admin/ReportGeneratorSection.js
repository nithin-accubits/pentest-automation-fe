import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useDispatch } from "react-redux";
import { useSearchParams } from "react-router-dom";
import { toast } from "react-toastify";
import {
  addVulnerability,
  getAllProjects,
  getVulnerabilities,
} from "../../AppRedux/actions/project";
import { PlusIcon } from "../../utilities/svg";
import {
  InputGroup,
  ListItem,
  ModalOuter,
  PrimaryButton,
  Scaleloader,
  SecondaryButton,
  Spinner,
  UploadFileContainer,
} from "../generalComponents";

const ReportGeneratorSection = () => {
  const dispatch = useDispatch();
  let [params, setParams] = useSearchParams();
  const [selectedProjectId, setSelectedProjectId] = useState(false);
  const [projectsData, setProjectsData] = useState(false);
  const [formError, setFormError] = useState({});
  const [formData, setFormData] = useState({
    project: "Select Project",
  });
  const { project } = formData;
  const tabFromParams = params.get("tab");
  const { getAllProjectsBegin, getAllProjectsSuccessData } = useSelector(
    ({ project }) => project
  );

  console.log(selectedProjectId);

  const inputData = [
    {
      label: "Select Project",
      placeHolder: "Select Project",
      type: "dropdown",
      name: "project",
      options: projectsData ? projectsData.map((data) => data.name) : [],
    },
  ];

  const projectDetails = [
    {
      name: "Name	",
      key: "name",
    },
    {
      name: "Official Email",
      key: "officialEmail",
    },
    {
      name: "Project Manager",
      key: "projectManager",
    },
    {
      name: "Status",
      key: "status",
    },
    {
      name: "Description",
      key: "description",
    },
    {
      name: "Category",
      key: "category",
    },
  ];

  useEffect(() => {
    dispatch(getAllProjects());
  }, [dispatch]);

  useEffect(() => {
    if (getAllProjectsSuccessData) {
      setProjectsData(getAllProjectsSuccessData.result.projects);
    }
  }, [getAllProjectsSuccessData]);

  return (
    <div>
      <h6 className="text-grey1 font-bold text-3xl border-b border-grey5 pb-4 mb-7">
        Generate Report
      </h6>

      <div className="w-1/2">
        {inputData.map((data, index) => (
          <InputGroup
            key={index}
            {...data}
            value={
              formData[Object.keys(formData).find((key) => key === data.name)]
            }
            setFormError={setFormError}
            formError={formError}
            inputError={
              formError[Object.keys(formError).find((key) => key === data.name)]
            }
            setFormData={setFormData}
            OnChange={(name) => {
              setSelectedProjectId(
                projectsData.find((project) => name === project.name)["_id"]
              );
            }}
          />
        ))}
      </div>

      {project !== "Select Project" && selectedProjectId && (
        <>
          <div className="flexCenter justify-between border-b pb-4 border-grey5">
            <h6 className="text-grey1 font-bold text-xl">Project Details</h6>
            <PrimaryButton
              onClick={() => {
                setParams({
                  tab: "add-vulnerability",
                });
              }}
            >
              <PlusIcon className="stroke-current" /> Add Vulnerability
            </PrimaryButton>
          </div>

          <div className="flex flex-col gap-5 pb-8 border-b border-grey5">
            {projectDetails.map(({ name, key }, index) => {
              return (
                <ListItem
                  key={index}
                  name={name}
                  value={
                    projectsData.find(({ _id }) => selectedProjectId === _id)[
                      key
                    ]
                  }
                />
              );
            })}
          </div>
        </>
      )}

      {tabFromParams === "add-vulnerability" && (
        <ModalOuter
          state={tabFromParams === "add-vulnerability"}
          setState={() => setParams({})}
        >
          <AddVulnerabilityModal selectedProjectId={selectedProjectId} />
        </ModalOuter>
      )}
    </div>
  );
};

export default ReportGeneratorSection;

const AddVulnerabilityModal = ({ selectedProjectId }) => {
  const dispatch = useDispatch();
  let [params, setParams] = useSearchParams();
  const [vulnerabilitiesData, setVulnerabilitiesData] = useState(false);
  const [formError, setFormError] = useState({});
  const [formData, setFormData] = useState({
    vulnerabilityId: "Select Vulnerability Id",
    scenario: "",
    stepsToReproduce: "",
    impactURL: "",
    proofOfConcepts: [],
  });
  const {
    getVulnerabilitiesBegin,
    getVulnerabilitiesSuccessData,
    addVulnerabilityBegin,
    addVulnerabilitySuccessData,
    addVulnerabilityFailureData,
  } = useSelector(({ project }) => project);

  useEffect(() => {
    if (getVulnerabilitiesSuccessData) {
      setVulnerabilitiesData(
        getVulnerabilitiesSuccessData.result.vulnerabilities
      );
    }
  }, [getVulnerabilitiesSuccessData]);

  const { proofOfConcepts } = formData;

  const inputData = [
    {
      label: "Select Vulnerability Id",
      placeHolder: "Select Vulnerability Id",
      type: "dropdown",
      name: "vulnerabilityId",
      options: vulnerabilitiesData
        ? vulnerabilitiesData.map((data) => data["_id"])
        : [],
    },
    {
      label: "Scenario *",
      placeHolder: "Enter Vulnerability Scenario",
      type: "text",
      name: "scenario",
    },
    {
      label: "Steps To Reproduce *",
      placeHolder: "Steps To Reproduce",
      type: "description",
      name: "stepsToReproduce",
    },
    {
      label: "ImpactURL/Path *",
      placeHolder: "Enter URL/Path",
      type: "text",
      name: "impactURL",
    },
  ];

  useEffect(() => {
    dispatch(getVulnerabilities());
  }, [dispatch]);
  useEffect(() => {
    if (addVulnerabilityFailureData) {
      toast.error(addVulnerabilityFailureData.errors[0]?.msg);
    }
    if (addVulnerabilitySuccessData) {
      toast.success("Vulnerability Added Successfully");
      setParams({});
    }
  }, [addVulnerabilityFailureData, addVulnerabilitySuccessData, setParams]);

  const handleAdd = () => {
    const validationErrors = formValidation(formData);
    if (Object.keys(validationErrors).length === 0) {
      dispatch(addVulnerability(selectedProjectId, formData));
    } else {
      setFormError({ ...formError, ...validationErrors });
    }
  };

  return (
    <div className="bg-white rounded-lg min-w-fit 500px:min-w-[600px] p-6 relative">
      <h1 className="text-dark1 font-bold text-2xl border-b border-grey5 pb-4 mb-4">
        Add Vulnerability
      </h1>

      {inputData.map((data, index) => (
        <InputGroup
          key={index}
          {...data}
          value={
            formData[Object.keys(formData).find((key) => key === data.name)]
          }
          setFormError={setFormError}
          formError={formError}
          inputError={
            formError[Object.keys(formError).find((key) => key === data.name)]
          }
          setFormData={setFormData}
        />
      ))}

      <h6 className="text-dark1 font-medium text-sm">Proof Of Concept</h6>
      <UploadFileContainer
        name="proofOfConcepts"
        setFormData={setFormData}
        filesData={proofOfConcepts}
        classNames="py-7 mb-6"
        secondaryText="or drag & drop"
      />

      <div className="flexCenter gap-4">
        <SecondaryButton
          classNames="bg-white text-dark1 border border-grey3 px-5 380px:px-10"
          onClick={() => setParams({})}
        >
          Cancel
        </SecondaryButton>
        <PrimaryButton
          classNames="px-5 380px:px-10"
          onClick={() => handleAdd()}
          disabled={addVulnerabilityBegin}
        >
          Add {addVulnerabilityBegin && <Spinner />}
        </PrimaryButton>
      </div>
    </div>
  );
};

const formValidation = (formData) => {
  const validationErrors = {};

  const {
    vulnerabilityId,
    scenario,
    stepsToReproduce,
    impactURL,
    proofOfConcepts,
  } = formData;

  if (vulnerabilityId?.trim() === "") {
    validationErrors.vulnerabilityId = "This field is required";
  }
  if (scenario?.trim() === "") {
    validationErrors.scenario = "This field is required";
  }
  if (impactURL?.trim() === "") {
    validationErrors.impactURL = "This field is required";
  }
  if (stepsToReproduce?.trim() === "") {
    validationErrors.stepsToReproduce = "This field is required";
  }
  return validationErrors;
};
