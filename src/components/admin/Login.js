import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useNavigate, useSearchParams } from "react-router-dom";
import { toast } from "react-toastify";

import { storeToken } from "../../utilities/crypto";
import { BrandInput, PrimaryButton, Spinner } from "../generalComponents";
import {
  adminLogin,
  ResetAdminPassword,
  sendPasswordResetLink,
} from "../../AppRedux/actions/Admin";
import {
  LoginBg,
  LoginCoins,
  WhiteLogo,
  LoginBlueBg,
} from "../../utilities/svg";

const Login = ({ forgotPassword, resetPassword, loginPage }) => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const [params] = useSearchParams();
  const [passwordResetStatus, setPasswordResetStatus] = useState(false);
  const [formError, setFormError] = useState({});
  const [formData, setFormData] = useState({
    email: "admin@pentest.com",
    password: "Test@678@",
  });
  const tokenFromParams = params.get("token");
  const {
    adminLoginBegin,
    adminLoginSuccessData,
    adminLoginFailureData,
    resetPasswordSendLinkBegin,
    resetPasswordSendLinkSuccessData,
    resetPasswordSendLinkFailureData,
    resetAdminPasswordBegin,
    resetAdminPasswordSuccessData,
    resetAdminPasswordFailureData,
  } = useSelector(({ admin }) => admin);

  useEffect(() => {
    if (resetPassword) {
      if (!tokenFromParams) {
        return navigate("/admin/login");
      }
    }
  }, [resetPassword, tokenFromParams, navigate]);

  // Admin login
  useEffect(() => {
    if (adminLoginSuccessData) {
      setFormData({
        email: "",
        password: "",
        confirmPassword: "",
      });
      storeToken({ token: adminLoginSuccessData.result.token });
      return navigate("/dashboard/projects");
    }
    if (adminLoginFailureData) {
      toast.error(adminLoginFailureData.message);
    }
    setTimeout(() => {
      toast.clearWaitingQueue();
    }, 2000);
  }, [adminLoginSuccessData, adminLoginFailureData, navigate, dispatch]);

  // reset password link send
  useEffect(() => {
    if (resetPasswordSendLinkSuccessData) {
      toast.success(
        "Password reset link sent to your email account, Please check your email.  "
      );
      setPasswordResetStatus("email sent");
      setFormData({
        email: "",
        password: "",
        confirmPassword: "",
      });
    }
    if (resetPasswordSendLinkFailureData) {
      toast.error(resetPasswordSendLinkFailureData);
    }
    setTimeout(() => {
      toast.clearWaitingQueue();
    }, 2000);
  }, [resetPasswordSendLinkSuccessData, resetPasswordSendLinkFailureData]);

  // reset password
  useEffect(() => {
    if (resetAdminPasswordSuccessData) {
      toast.success(
        "Password reset successfully, please login with new password. "
      );
      return navigate("/admin/login");
    }
    if (resetAdminPasswordFailureData) {
      toast.error(resetAdminPasswordFailureData.message);
    }

    setTimeout(() => {
      toast.clearWaitingQueue();
    }, 2000);
  }, [resetAdminPasswordSuccessData, resetAdminPasswordFailureData, navigate]);

  const handleFormSubmit = (e) => {
    e.preventDefault();

    if (forgotPassword) {
      if (passwordResetStatus !== "email sent") {
        const data = {
          email: formData.email,
        };
        dispatch(sendPasswordResetLink(data));
      } else {
        return navigate("/admin/login");
      }
    }
    if (resetPassword) {
      const validationErrors = setupPasswordFormValidation(
        formData.password,
        formData.confirmPassword
      );
      if (Object.keys(validationErrors).length === 0) {
        const data = {
          newPassword: formData.password,
          confirmPassword: formData.confirmPassword,
        };
        dispatch(ResetAdminPassword(data, tokenFromParams));
      } else {
        setFormError({ ...formError, ...validationErrors });
      }
    } else if (loginPage) {
      const data = {
        username: formData.email,
        password: formData.password,
      };
      dispatch(adminLogin(data));
    }
  };

  const handleInputOnChange = (e) => {
    let sm = formError;
    delete sm[[e.target.name]];
    setFormError({ ...formError, ...sm });

    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  return (
    <div className="flex flex-col md:flex-row min-h-screen overflow-hidden">
      <div className="flex-1 relative">
        <LoginBg className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2" />
        <LoginCoins className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full" />
      </div>
      <div className="bg-primary flex-1 relative overflow-hidden">
        <Link to="/" className="mt-8 ml-8 z-10 relative inline-block">
          <WhiteLogo />
        </Link>
        <LoginBlueBg className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2" />
        <div className="flexCenter h-full pt-10 md:pt-0">
          <div className=" bg-white rounded-7px 500px:rounded-13px p-7 lg:p-14 w-full lg:w-3/4 max-w-md z-10 mb-4 mx-3">
            <h1 className="text-dark1 text-2xl font-bold text-center">
              {forgotPassword
                ? "Forgot password?"
                : resetPassword
                ? "Create new password"
                : "Log in to Zipmex"}
            </h1>
            {forgotPassword || resetPassword ? (
              <p className="text-grey1 text-base font-normal text-center mt-3">
                {forgotPassword
                  ? "Enter your email address and we will share a link to create a new password"
                  : "Your new password must be different from previous used passwords."}
              </p>
            ) : (
              ""
            )}
            <form
              className="mt-10 flex flex-col gap-3 500px:gap-5"
              onSubmit={(e) => handleFormSubmit(e)}
            >
              {forgotPassword ? (
                <BrandInput
                  name="email"
                  type="Email"
                  placeholder="Email"
                  value={formData.email}
                  disabled={passwordResetStatus === "email sent" ? true : false}
                  onChange={(e) => handleInputOnChange(e)}
                />
              ) : resetPassword ? (
                <>
                  <BrandInput
                    name="password"
                    type="Password"
                    placeholder="New password"
                    value={formData.password}
                    onChange={(e) => handleInputOnChange(e)}
                    error={formError.password}
                  />{" "}
                  <BrandInput
                    name="confirmPassword"
                    type="Password"
                    placeholder="Confirm password"
                    value={formData.confirmPassword}
                    onChange={(e) => handleInputOnChange(e)}
                    error={formError.confirmPassword}
                  />
                </>
              ) : (
                <>
                  <BrandInput
                    name="email"
                    type="email"
                    placeholder="Email"
                    value={formData.email}
                    onChange={(e) => handleInputOnChange(e)}
                  />
                  <BrandInput
                    name="password"
                    type="Password"
                    placeholder="Password"
                    value={formData.password}
                    onChange={(e) => handleInputOnChange(e)}
                  />
                  <Link
                    to="/admin/forgot_password"
                    className="text-dark1 font-medium text-sm block text-right primaryHover"
                  >
                    Forgot password?
                  </Link>
                </>
              )}

              <PrimaryButton
                classNames={`w-full mt-5 380px:py-4 ${
                  passwordResetStatus === "email sent" ? "bg-green-600" : ""
                }`}
              >
                {forgotPassword
                  ? passwordResetStatus === "email sent"
                    ? "Back to login"
                    : "Reset Password"
                  : resetPassword
                  ? "Reset Password"
                  : "Login"}{" "}
                {adminLoginBegin ||
                resetPasswordSendLinkBegin ||
                resetAdminPasswordBegin ? (
                  <Spinner size="20px" />
                ) : (
                  ""
                )}
              </PrimaryButton>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;

const setupPasswordFormValidation = (passoword, confirmPassword) => {
  const validationErrors = {};
  if (passoword?.trim() === "") {
    validationErrors.password = "This field is required";
  }
  if (confirmPassword?.trim() === "") {
    validationErrors.confirmPassword = "This field is required";
  }

  if (
    passoword?.trim() !== "" &&
    confirmPassword?.trim() !== "" &&
    passoword !== confirmPassword
  ) {
    validationErrors.confirmPassword =
      "New Password and Confirm Password didn't match.";
  }
  if (
    passoword?.trim() !== "" &&
    confirmPassword?.trim() !== "" &&
    passoword === confirmPassword &&
    passoword.length < 8
  ) {
    validationErrors.confirmPassword =
      "* Your password must be at least 8 characters";
  }
  if (
    passoword?.trim() !== "" &&
    confirmPassword?.trim() !== "" &&
    passoword === confirmPassword &&
    passoword.length >= 8 &&
    passoword.search(/[a-z]/) < 0
  ) {
    validationErrors.confirmPassword =
      "Your password needs a lower case letter";
  }
  if (
    passoword?.trim() !== "" &&
    confirmPassword?.trim() !== "" &&
    passoword === confirmPassword &&
    passoword.length >= 8 &&
    passoword.search(/[a-z]/) >= 0 &&
    passoword.search(/[A-Z]/) < 0
  ) {
    validationErrors.confirmPassword =
      "Your password needs an upper case letter";
  }
  if (
    passoword?.trim() !== "" &&
    confirmPassword?.trim() !== "" &&
    passoword === confirmPassword &&
    passoword.length >= 8 &&
    passoword.search(/[a-z]/) >= 0 &&
    passoword.search(/[A-Z]/) >= 0 &&
    passoword.search(/[0-9]/) < 0
  ) {
    validationErrors.confirmPassword = "Your password needs a number";
  }
  if (
    passoword?.trim() !== "" &&
    confirmPassword?.trim() !== "" &&
    passoword === confirmPassword &&
    passoword.length >= 8 &&
    passoword.search(/[a-z]/) >= 0 &&
    passoword.search(/[A-Z]/) >= 0 &&
    passoword.search(/[0-9]/) >= 0 &&
    passoword.search(/[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]+/) < 0
  ) {
    validationErrors.confirmPassword = "Your password needs a symbol";
  }

  return validationErrors;
};
