import React from "react";
import Picker from "rc-calendar/lib/Picker";
import RangeCalendar from "rc-calendar/lib/RangeCalendar";
import zhCN from "rc-calendar/lib/locale/zh_CN";
import enUS from "rc-calendar/lib/locale/en_US";
import "rc-calendar/assets/index.css";

import moment from "moment";
import "moment/locale/zh-cn";
import "moment/locale/en-gb";
import { BlueCloseIcon, CalendarDarkIcon } from "../../utilities/svg";

const cn = window.location.search.indexOf("cn") !== -1;

if (cn) {
  moment.locale("zh-cn");
} else {
  moment.locale("en-gb");
}

const now = moment();
if (cn) {
  now.utcOffset(8);
} else {
  now.utcOffset(0);
}

const defaultCalendarValue = now.clone();
defaultCalendarValue.add(-1, "month");

function newArray(start, end) {
  const result = [];
  for (let i = start; i < end; i++) {
    result.push(i);
  }
  return result;
}

function disabledTime(time, type) {
  if (type === "start") {
    return {
      disabledHours() {
        const hours = newArray(0, 60);
        hours.splice(20, 4);
        return hours;
      },
      disabledMinutes(h) {
        if (h === 20) {
          return newArray(0, 31);
        } else if (h === 23) {
          return newArray(30, 60);
        }
        return [];
      },
      disabledSeconds() {
        return [55, 56];
      },
    };
  }
  return {
    disabledHours() {
      const hours = newArray(0, 60);
      hours.splice(2, 6);
      return hours;
    },
    disabledMinutes(h) {
      if (h === 20) {
        return newArray(0, 31);
      } else if (h === 23) {
        return newArray(30, 60);
      }
      return [];
    },
    disabledSeconds() {
      return [55, 56];
    },
  };
}

const formatStr = "MMM DD";
const formatStr2 = "DD / MM / YYYY";
function format(v) {
  return v ? v.format(formatStr) : "";
}
function formatWithYear(v) {
  return v ? v.format(formatStr2) : "";
}

function isValidRange(v) {
  return v && v[0] && v[1];
}

class Demo extends React.Component {
  state = {
    value: [],
    hoverValue: [],
  };

  onChange = (value) => {
    this.setState({ value });
  };

  onHoverChange = (hoverValue) => {
    this.setState({ hoverValue });
  };

  render() {
    const state = this.state;
    const calendar = (
      <RangeCalendar
        hoverValue={state.hoverValue}
        onHoverChange={this.onHoverChange}
        showWeekNumber={false}
        dateInputPlaceholder={["start", "end"]}
        showDateInput={false}
        showOk={false}
        onSelect={(dates) => {
          this.props.onSelectFunction(dates);
        }}
        defaultValue={[now, now.clone().add(1, "months")]}
        locale={cn ? zhCN : enUS}
        disabledTime={disabledTime}
        renderFooter={() => {
          return (
            <div className="flex items-center justify-around">
              <div
                className="font-normal text-sm border border-grey1 rounded-5px px-2 py-1"
                style={{
                  color: "#1C1F27",
                }}
              >
                {formatWithYear(state.hoverValue[0])
                  ? formatWithYear(state.hoverValue[0])
                  : state.value.length > 0
                  ? formatWithYear(state.value[0])
                  : "Choose date"}
              </div>
              <div
                className="font-normal text-sm border border-grey1 rounded-5px  px-2 py-1"
                style={{
                  color: "#1C1F27",
                }}
              >
                {formatWithYear(state.hoverValue[1])
                  ? formatWithYear(state.hoverValue[1])
                  : state.value.length > 0
                  ? formatWithYear(state.value[1])
                  : "Choose date"}
              </div>
            </div>
          );
        }}
      />
    );
    return (
      <Picker
        value={state.value}
        onChange={this.onChange}
        animation="slide-up"
        calendar={calendar}
      >
        {({ value }) => {
          return (
            <div className="flexCenter gap-2 px-2 380px:px-5 py-2 rounded-3xl bg-white border-1.5px border-grey4 cursor-pointer active:scale-105 transition1">
              <CalendarDarkIcon />{" "}
              <div className="text-grey2 font-normal text-sm">
                {(isValidRange(value) && (
                  <div className="flexCenter gap-5">
                    <p>
                      {format(value[0])} - {format(value[1])}
                    </p>
                    <div
                      onClick={(e) => {
                        e.stopPropagation();
                        this.setState({ value: [] });
                        this.props.onReset();
                      }}
                      className="w-5 h-5 bg-grey5 flexCenter rounded-full"
                    >
                      <BlueCloseIcon
                        className=""
                        style={{ width: "10px", height: "10px" }}
                      />
                    </div>
                  </div>
                )) || <p>Filter by date</p>}
              </div>
            </div>
          );
        }}
      </Picker>
    );
  }
}

const RcCalendar = ({ onSelectFunction, onReset }) => {
  return <Demo onSelectFunction={onSelectFunction} onReset={onReset} />;
};
export default RcCalendar;
