import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useDispatch } from "react-redux";
import { toast } from "react-toastify";
import { createProject } from "../../AppRedux/actions/project";
import { InputGroup, PrimaryButton, Spinner } from "../generalComponents";

const CreateProjectSection = () => {
  const dispatch = useDispatch();
  const [formError, setFormError] = useState({});
  const [formData, setFormData] = useState({
    name: "",
    projectManager: "",
    officialEmail: "",
    description: "",
    category: "Enter projct category",
    status: "Enter projct status",
  });
  const {
    createProjectBegin,
    createProjectSuccessData,
    createProjectFailureData,
  } = useSelector(({ project }) => project);

  const inputData = [
    {
      label: "Project Name *",
      placeHolder: "Enter projct name",
      type: "text",
      name: "name",
    },
    {
      label: "Project Manager *",
      placeHolder: "Enter projct Manager Name",
      type: "text",
      name: "projectManager",
    },
    {
      label: "Official Email *",
      placeHolder: "Enter Officail Email",
      type: "email",
      name: "officialEmail",
    },
    {
      label: "Description *",
      placeHolder: "Description",
      type: "description",
      name: "description",
    },
    {
      label: "Category *",
      placeHolder: "Enter projct category",
      type: "dropdown",
      name: "category",
      options: ["Web", "Backend", "Mobile", "Infrastructure", "Smart Contract"],
    },
    {
      label: "Status *",
      placeHolder: "Enter projct status",
      type: "dropdown",
      name: "status",
      options: ["To Do", "In Progress", "Completed"],
    },
  ];

  useEffect(() => {
    if (createProjectSuccessData) {
      toast.success("Project created successfully");
    }
  }, [createProjectSuccessData]);

  const handleCreateProject = () => {
    const validationErrors = formValidation(formData);
    if (Object.keys(validationErrors).length === 0) {
      dispatch(createProject(formData));
    } else {
      setFormError({ ...formError, ...validationErrors });
    }
  };

  return (
    <div className="md:max-w-3xl mx-auto mb-6">
      <h6 className="text-grey1 font-bold text-3xl border-b border-grey5 pb-4 mb-7">
        Create Project
      </h6>
      <form
        onSubmit={(e) => {
          e.preventDefault();
          handleCreateProject();
        }}
      >
        {inputData.map((data, index) => (
          <InputGroup
            key={index}
            {...data}
            value={
              formData[Object.keys(formData).find((key) => key === data.name)]
            }
            setFormError={setFormError}
            formError={formError}
            inputError={
              formError[Object.keys(formError).find((key) => key === data.name)]
            }
            setFormData={setFormData}
          />
        ))}
        <PrimaryButton
          classNames="w-1/2 mx-auto"
          onSubmit={() => handleCreateProject()}
        >
          Create {createProjectBegin && <Spinner />}
        </PrimaryButton>
      </form>
    </div>
  );
};

export default CreateProjectSection;

const formValidation = (formData) => {
  const validationErrors = {};

  const { name, officialEmail, description, category, status, projectManager } =
    formData;

  if (name?.trim() === "") {
    validationErrors.vulnerabilityId = "This field is required";
  }
  if (officialEmail?.trim() === "") {
    validationErrors.officialEmail = "This field is required";
  }
  if (description?.trim() === "") {
    validationErrors.description = "This field is required";
  }
  if (category?.trim() === "Enter projct category") {
    validationErrors.category = "This field is required";
  }
  if (status?.trim() === "Enter projct status") {
    validationErrors.status = "This field is required";
  }
  if (projectManager?.trim() === "") {
    validationErrors.projectManager = "This field is required";
  }
  return validationErrors;
};
