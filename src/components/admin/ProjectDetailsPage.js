import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useDispatch } from "react-redux";
import { useParams, useSearchParams } from "react-router-dom";
import { getSingleProject } from "../../AppRedux/actions/project";
import { AccordionArrow, PlusIcon } from "../../utilities/svg";
import {
  ListItem,
  ModalOuter,
  PrimaryButton,
  SecondaryButton,
} from "../generalComponents";
import { AddVulnerabilityModal } from "./ReportGeneratorSection";

const ProjectDetailsPage = () => {
  const dispatch = useDispatch();
  let params = useParams();
  const [singleprojectData, setSingleProjectData] = useState(false);
  const [clicked, setClicked] = useState(false);
  let [searchParams, setParams] = useSearchParams();
  const tabFromParams = searchParams.get("tab");

  const { getSingleProjectBegin, getSingleProjectSuccessData } = useSelector(
    ({ project }) => project
  );

  useEffect(() => {
    if (getSingleProjectSuccessData) {
      setSingleProjectData(getSingleProjectSuccessData.result);
    }
  }, [getSingleProjectSuccessData]);

  useEffect(() => {
    dispatch(getSingleProject(params.projectID));
  }, [dispatch, params]);

  const projectDetails = [
    {
      name: "Name",
      key: "name",
    },
    {
      name: "Official Email",
      key: "officialEmail",
    },
    {
      name: "Project Manager",
      key: "projectManager",
    },
    {
      name: "Status",
      key: "status",
    },
    {
      name: "Description",
      key: "description",
    },
    {
      name: "Category",
      key: "category",
    },
  ];

  const toggle = (index) => {
    if (clicked === index) {
      return setClicked(null);
    }
    setClicked(index);
  };

  const vulnerabilityDetails = [
    {
      name: "Scenario",
      key: "scenario",
    },
    {
      name: "Steps To Reproduce ",
      key: "stepsToReproduce",
    },
    {
      name: "Impact URL",
      key: "impactURL",
    },
  ];
  const vulnerabilityInsideDetails = [
    {
      name: "Name",
      key: "name",
    },

    {
      name: "Severity",
      key: "severity",
    },
    {
      name: "Impact",
      key: "impact",
    },
    {
      name: "Description",
      key: "description",
    },
    {
      name: "References",
      key: "references",
    },
    {
      name: "Remediation",
      key: "remediation",
    },
  ];

  return (
    <div className="my-5">
      <div className="flexCenter justify-between border-b pb-4   mb-4 border-grey5">
        <h6 className="text-grey1 font-bold text-3xl">Project Details</h6>
        <div className="flexCenter gap-4">
          <SecondaryButton
            classNames="bg-white text-primary border border-primary"
            onClick={() => {}}
          >
            Generate Report
          </SecondaryButton>
          <PrimaryButton
            onClick={() => {
              setParams({
                tab: "add-vulnerability",
              });
            }}
          >
            <PlusIcon className="stroke-current" /> Add Vulnerability
          </PrimaryButton>
        </div>
      </div>
      <div className="flex flex-col gap-5 pb-8 border-b border-grey5">
        {projectDetails.map(({ name, key }, index) => {
          return (
            <ListItem key={index} name={name} value={singleprojectData[key]} />
          );
        })}
      </div>

      {singleprojectData &&
        singleprojectData?.projectVulnerabilities?.length > 0 && (
          <>
            <h6 className="text-grey1 font-bold text-lg py-2">
              Project Vulnerabilities
            </h6>

            {singleprojectData?.projectVulnerabilities.map((data, index) => (
              <div
                key={data["_id"]}
                className="bg-grey6 hover:bg-grey5 active:bg-grey5 transition2 rounded-sm 500px:rounded-9px px-6 py-4 mt-5"
              >
                <div
                  className="flexBetween gap-1 cursor-pointer"
                  onClick={() => {
                    toggle(data["_id"]);
                  }}
                >
                  <p className="text-grey1 font-medium">
                    Vulnerability {index + 1}
                  </p>
                  <AccordionArrow
                    className={`transition1 ${
                      clicked === data["_id"] ? "rotate-180" : ""
                    }`}
                  />
                </div>

                {clicked === data["_id"] && (
                  <div className="animate-TopToBottom mt-4">
                    <div className="flex flex-col gap-3 pb-3 border-b border-grey5">
                      {vulnerabilityDetails.map(({ name, key }, index) => {
                        return (
                          <ListItem key={index} name={name} value={data[key]} />
                        );
                      })}
                      {vulnerabilityInsideDetails.map(
                        ({ name, key }, index) => {
                          return (
                            <ListItem
                              key={index}
                              name={name}
                              value={data?.vulnerability[key]}
                            />
                          );
                        }
                      )}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </>
        )}

      {tabFromParams === "add-vulnerability" && (
        <ModalOuter
          state={tabFromParams === "add-vulnerability"}
          setState={() => setParams({})}
        >
          <AddVulnerabilityModal selectedProjectId={singleprojectData["_id"]} />
        </ModalOuter>
      )}
    </div>
  );
};

export default ProjectDetailsPage;
