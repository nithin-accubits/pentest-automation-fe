import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { useSearchParams } from "react-router-dom";
import { getAllUsers } from "../../AppRedux/actions/Admin";
import { AccordionArrow } from "../../utilities/svg";
import { ModalOuter } from "../generalComponents";
import { toast } from "react-toastify";

import { BrandInput } from "../generalComponents";
import { UploadFileContainer } from "../generalComponents/UploadSingleFilesPage";
import { SecondaryButton } from "../generalComponents";
import { Spinner } from "../generalComponents";
import {
  InputGroup,
  AccordionTable,
  NoListToShowContainer,
  RoundedButton,
  Scaleloader,
  TableBody,
  TableContainer,
} from "../generalComponents";
import { PrimaryButton } from "../generalComponents";
import { PlusIcon } from "../../utilities/svg";
import { createUser } from "../../AppRedux/actions/Admin";

const UsersList = () => {
  const dispatch = useDispatch();
  let [params, setParams] = useSearchParams();
  const [userssData, setUserssData] = useState(false);
  const [openAccordion, setOpenAccordion] = useState(false);
  const { getAllUsersBegin, getAllUsersSuccessData } = useSelector(
    ({ admin }) => admin
  );
  const tabFromParams = params.get("tab");

  useEffect(() => {
    dispatch(getAllUsers());
  }, [dispatch]);

  useEffect(() => {
    if (getAllUsersSuccessData) {
      setUserssData(getAllUsersSuccessData.result.users);
    }
  }, [getAllUsersSuccessData]);

  return (
    <div>
      <div className="flexCenter justify-between border-b pb-4 border-grey5">
        <h6 className="text-grey1 font-bold text-xl"> Users List</h6>
        <PrimaryButton
          onClick={() => {
            setParams({
              tab: "add-user",
            });
          }}
        >
          <PlusIcon className="stroke-current" /> Add User
        </PrimaryButton>
      </div>
      <TableContainer
        headerClassNames="grid-cols-4"
        headers={[
          {
            name: "First Name",
          },
          {
            name: "Last Name",
          },
          {
            name: "Mail ID",
          },
          {
            name: "Role",
          },
        ]}
      >
        {!getAllUsersBegin ? (
          userssData?.length > 0 ? (
            userssData.map((item, index) => (
              <ProjectListItem
                userData={item}
                key={index}
                setOpenAccordion={setOpenAccordion}
                openAccordion={openAccordion}
                index={index}
              />
            ))
          ) : (
            <NoListToShowContainer text="No Projects!" />
          )
        ) : (
          <Scaleloader />
        )}
      </TableContainer>
      {tabFromParams === "add-user" && (
        <ModalOuter
          state={tabFromParams === "add-user"}
          setState={() => setParams({})}
        >
          <AddVulnerabilityModal />
        </ModalOuter>
      )}
    </div>
  );
};

export default UsersList;

const ProjectListItem = ({
  userData,
  setOpenAccordion,
  openAccordion,
  index,
}) => {
  const navigate = useNavigate();

  const { _id, firstName, lastName, email, role } = userData;
  return (
    <>
      <AccordionTable
        index={index}
        id={index}
        openAccordion={openAccordion}
        setOpenAccordion={setOpenAccordion}
        Name={
          <>
            <div className="flex items-center gap-3">
              <p className="text-dark1 font-bold ">{firstName}</p>
            </div>

            <div className="flexCenter gap-3">
              <RoundedButton
                onClick={(e) => {
                  e.stopPropagation();
                  navigate(`/dashboard/projects/${_id}`);
                }}
              >
                Go to Profile
              </RoundedButton>

              <AccordionArrow
                className={`transition1 ${
                  openAccordion === _id ? "rotate-180" : ""
                }`}
              />
            </div>
          </>
        }
        nameIsComponent={true}
        accordionData={[
          {
            Title: "Name:",
            Value: firstName,
          },
          {
            Title: "Official Email:",
            Value: email,
          },
          {
            Title: "Project Manager:",
            Value: lastName,
          },
          {
            Title: "Role:",
            Value: role,
          },
        ]}
      />

      <TableBody
        classNames="grid-cols-4"
        onClick={() => {
          navigate(`/admin/dashboard/investors/${_id}`);
        }}
        data={[
          {
            Value: firstName,
          },
          {
            Value: lastName,
          },
          {
            Value: email,
          },
          {
            Value: role,
          },
        ]}
      />
    </>
  );
};

const AddVulnerabilityModal = () => {
  const dispatch = useDispatch();
  let [params, setParams] = useSearchParams();
  const [vulnerabilitiesData, setVulnerabilitiesData] = useState(false);
  const [formError, setFormError] = useState({});
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    role: "",
    designation: "",
    profileImage: "",
  });
  const { createUserBegin, createUserSuccessData, createUserFailureData } =
    useSelector(({ admin }) => admin);

  const roles = ["Admin", "User", "Manager"];

  const inputData = [
    {
      label: "First Name *",
      placeHolder: "Enter First Name",
      type: "text",
      name: "firstName",
    },
    {
      label: "Last Name *",
      placeHolder: "Enter First Name",
      type: "text",
      name: "lastName",
    },
    {
      label: "Email *",
      placeHolder: "Enter email",
      type: "text",
      name: "email",
    },
    {
      label: "Password *",
      placeHolder: "Enter Password",
      type: "Password",
      name: "password",
    },
    {
      label: "Designation *",
      placeHolder: "Enter designation",
      type: "text",
      name: "designation",
    },
    {
      label: "Select Role",
      placeHolder: "Select Role",
      type: "dropdown",
      name: "role",
      options: roles.map((data) => data),
    },
  ];

  useEffect(() => {
    if (createUserFailureData) {
      toast.error(createUserFailureData.errors[0]?.msg);
    }
    if (createUserSuccessData) {
      toast.success("Vulnerability Added Successfully");
      dispatch(getAllUsers());
      setParams({});
    }
  }, [createUserSuccessData, setParams]);

  const handleAdd = () => {
    const validationErrors = formValidation(formData);
    if (Object.keys(validationErrors).length === 0) {
      dispatch(createUser(formData));
    } else {
      setFormError({ ...formError, ...validationErrors });
    }
  };

  const handleInputOnChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  console.log(formData);

  return (
    <div className="bg-white rounded-lg min-w-fit 500px:min-w-[600px] p-6 relative">
      <h1 className="text-dark1 font-bold text-2xl border-b border-grey5 pb-4 mb-4">
        Add Users
      </h1>

      {inputData.map((data, index) => (
        <>
          <InputGroup
            key={index}
            {...data}
            value={
              formData[Object.keys(formData).find((key) => key === data.name)]
            }
            setFormError={setFormError}
            formError={formError}
            inputError={
              formError[Object.keys(formError).find((key) => key === data.name)]
            }
            setFormData={setFormData}
          />
          {data.type === "Password" && (
            <BrandInput
              name="password"
              type="Password"
              placeholder="New password"
              value={formData.password}
              onChange={(e) => handleInputOnChange(e)}
              error={formError.password}
            />
          )}
        </>
      ))}

      <h6 className="text-dark1 font-medium text-sm">Upload Profile Image</h6>

      <UploadFileContainer
        name="profileImage"
        setFormData={setFormData}
        file={formData?.profileImage}
        classNames="py-7 mb-6"
        secondaryText="or drag & drop"
      />

      <div className="flexCenter gap-4">
        <SecondaryButton
          classNames="bg-white text-dark1 border border-grey3 px-5 380px:px-10"
          onClick={() => setParams({})}
        >
          Cancel
        </SecondaryButton>
        <PrimaryButton
          classNames="px-5 380px:px-10"
          onClick={() => handleAdd()}
          disabled={createUserBegin}
        >
          Add {createUserBegin && <Spinner />}
        </PrimaryButton>
      </div>
    </div>
  );
};

const formValidation = (formData) => {
  const validationErrors = {};
  console.log(formData);
  const { firstName, lastName, email, password, role, designation } = formData;

  if (firstName?.trim() === "") {
    validationErrors.firstName = "This field is required";
  }
  if (lastName?.trim() === "") {
    validationErrors.lastName = "This field is required";
  }
  if (email?.trim() === "") {
    validationErrors.email = "This field is required";
  }
  if (role?.trim() === "") {
    validationErrors.role = "This field is required";
  }
  if (designation?.trim() === "") {
    validationErrors.designation = "This field is required";
  }
  if (password?.trim() === "") {
    validationErrors.password = "This field is required";
  }
  return validationErrors;
};
