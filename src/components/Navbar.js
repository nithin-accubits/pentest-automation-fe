import React, { useEffect, useState } from "react";
import { Link, useLocation } from "react-router-dom";

import { logo, navItems } from "../Data/globalData";
import { BlueCloseIcon, Hamburger } from "../utilities/svg";
import { scrollToTop } from "./generalComponents";
import { getToken } from "../utilities/crypto";

const Navbar = () => {
  const [fixed, setFixed] = useState(false);
  const [hamburgerOpen, setHamburgerOpen] = useState(false);

  useEffect(() => {
    window.addEventListener("scroll", stickNavbar);
    return () => {
      window.removeEventListener("scroll", stickNavbar);
    };
  }, []);

  function stickNavbar() {
    if (window.scrollY >= 120) {
      setFixed(true);
    } else {
      setFixed(false);
    }
  }

  console.log(getToken());

  return (
    <nav
      className={`bg-white w-full transition-all ease-in-out border border-grey7 z-20 ${
        fixed ? "fixed z-20 animate-TopToBottom" : "relative"
      }`}
    >
      <div className="py-4 pageWidth container flexBetween gap-2">
        <Link onClick={() => scrollToTop()} to={logo.link}>
          <logo.Icon className="w-10/12 500px:w-full" />
        </Link>

        <div className="flex items-center gap-2 380px:gap-6 md:gap-10 bg-white">
          <div className="hidden xl:block">
            <NavLinks
              hamburgerOpen={hamburgerOpen}
              setHamburgerOpen={setHamburgerOpen}
            />
          </div>

          {/* Hamburger Icon */}
          <div
            className={`block primaryHover xl:hidden`}
            onClick={() => {
              setHamburgerOpen(!hamburgerOpen);
            }}
            style={{ minWidth: "22px", minHeight: "12px" }}
          >
            {hamburgerOpen ? (
              <BlueCloseIcon className="animate-TopToBottom float-right" />
            ) : (
              <Hamburger className="animate-TopToBottom" />
            )}
          </div>
        </div>
      </div>

      <div className={`block xl:hidden`}>
        <NavLinks
          hamburgerOpen={hamburgerOpen}
          setHamburgerOpen={setHamburgerOpen}
        />
      </div>
    </nav>
  );
};

export default Navbar;

const NavLinks = ({ hamburgerOpen, setHamburgerOpen }) => {
  const { pathname } = useLocation();

  return (
    <div
      className={`flexCenter flex-col text-dark1 bg-white font-medium text-base gap-3 500px:gap-6 pb-5 ${
        hamburgerOpen
          ? "absolute md:relative animate-TopToBottom w-full shadow-md md:shadow-none"
          : `hidden xl:flex xl:flex-row xl:gap-10 xl:pb-0`
      }`}
    >
      {navItems.links.map(({ link, name }, index) => (
        <div
          key={index}
          className={`primaryHover ${
            pathname === link ? "text-primary font-bold" : ""
          }`}
        >
          <Link
            onClick={() => {
              setHamburgerOpen(false);
              scrollToTop();
            }}
            to={link}
          >
            {name}
          </Link>
        </div>
      ))}
    </div>
  );
};
