import { useState } from "react";
import { EyeIcon, EyeOpen, SearchIcon } from "../../utilities/svg";
import { SelectDateCalendar } from "./SelectDateCalendar";

// Input fields with label
export const InputGroup = ({
  label,
  placeHolder,
  type,
  options,
  name,
  value,
  formError,
  inputError,
  setFormError,
  setFormData,
  Icon,
  onIconClick,
  OnChange,
  disabled,
  disableWithoutStyle,
  hoverEffect,
  leftIcon,
  removeDecimals,
}) => {
  const onChange = (e) => {
    if (formError) {
      let sm = formError;
      delete sm[[e.target.name]];
      setFormError({ ...formError, ...sm });
    }
    OnChange && OnChange(e.target.value);

    setFormData((formData) => ({
      ...formData,
      [e.target.name]: e.target.value,
    }));
  };

  return (
    <div className="mb-2">
      {type === "date" ? (
        <SelectDateCalendar
          data={{
            label,
            placeHolder,
            setFormData,
            inputError,
            setFormError,
            name,
            value,
          }}
        />
      ) : (
        <>
          <p className="text-dark1 font-medium text-sm pb-2">{label}</p>
          {type === "text" || type === "number" || type === "email" ? (
            <BrandInput
              placeholder={placeHolder}
              type={type}
              value={value}
              name={name}
              onChange={(e) => onChange(e)}
              error={inputError}
              Icon={Icon}
              onIconClick={onIconClick}
              disabled={disabled}
              disableWithoutStyle={disableWithoutStyle}
              hoverEffect={hoverEffect}
              leftIcon={leftIcon}
              removeDecimals={removeDecimals}
            />
          ) : type === "dropdown" ? (
            <Dropdown
              placeHolder={placeHolder}
              options={options}
              onChange={(e) => {
                onChange(e);
              }}
              name={name}
              error={inputError}
              value={value}
            />
          ) : type === "description" ? (
            <DescriptionInput
              placeHolder={placeHolder}
              error={inputError}
              onChange={(e) => onChange(e)}
              value={value}
              name={name}
              Icon={Icon}
              onIconClick={onIconClick}
              disabled={disabled || disableWithoutStyle}
            />
          ) : null}
        </>
      )}
    </div>
  );
};

// Zipmex brand input
export const BrandInput = ({
  type,
  placeholder,
  value,
  onChange,
  name,
  disabled,
  disableWithoutStyle,
  error,
  Icon,
  onIconClick,
  hoverEffect,
  leftIcon,
  removeDecimals,
}) => {
  const [passwordShown, setPasswordShown] = useState(false);

  var invalidCharsInNumbers = ["-", "+", "e"];

  const onKeyDown = (e) => {
    if (type === "number" && invalidCharsInNumbers.includes(e.key)) {
      e.preventDefault();
    }
    if (type === "number" && e.key === "." && removeDecimals) {
      e.preventDefault();
    }
    if (type === "number") {
      if (e.which === 38 || e.which === 40) {
        e.preventDefault();
      }
    }
  };

  return (
    <div>
      <div className="relative">
        <input
          name={name}
          id={name}
          type={passwordShown ? "text" : type}
          value={value}
          min="0"
          className={`brandInput ${disabled ? "border-grey7 text-grey3" : ""} ${
            hoverEffect ? "primaryHover hover:bg-grey6 transition1" : ""
          } ${error ? "ring-1 ring-red-600 border-none" : ""} ${
            leftIcon ? "pl-12" : ""
          }`}
          placeholder={placeholder}
          // required={true}
          onChange={(e) => onChange(e)}
          disabled={disabled || hoverEffect || disableWithoutStyle}
          onKeyDown={(e) => onKeyDown(e)}
        />
        {name === "password" || name === "confirmPassword" || Icon ? (
          <div
            onClick={() =>
              onIconClick ? onIconClick() : setPasswordShown(!passwordShown)
            }
            className=" absolute top-1/2 transform right-0 cursor-pointer primaryHover"
          >
            <div
              className={`absolute -translate-y-1/2 pr-3 -translate-x-full text-grey2 font-normal text-sm ${
                error ? "text-red-600" : ""
              }`}
            >
              {!Icon ? !passwordShown ? <EyeIcon /> : <EyeOpen /> : Icon}
            </div>
          </div>
        ) : (
          ""
        )}
        {leftIcon && (
          <span
            className={`absolute top-0 transform h-full left-0 inline-flex items-center px-3 text-sm font-bold  border border-r-0 border-gray-300 rounded-l-7px dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600 ${
              error
                ? "text-red-600 bg-red-200 border-none"
                : "text-gray-900 bg-gray-200"
            }`}
          >
            {leftIcon}
          </span>
        )}
      </div>

      <p className="text-red-600 text-base">{error}</p>
    </div>
  );
};

export const DescriptionInput = ({
  placeHolder,
  disabled,
  error,
  value,
  onChange,
  name,
  Icon,
  onIconClick,
}) => (
  <>
    <div className="relative">
      <textarea
        className={`brandInput ${
          error ? "ring-1 ring-red-600 border-none" : ""
        }`}
        rows="6"
        placeholder={placeHolder}
        disabled={disabled}
        value={value}
        onChange={(e) => onChange(e)}
        name={name}
      />
      {Icon && (
        <div
          onClick={() => onIconClick()}
          className=" absolute top-1/2 transform -translate-y-full right-5 cursor-pointer primaryHover"
        >
          <div className="absolute w-5 -top-2 right-0 -left-2">{Icon}</div>
        </div>
      )}
    </div>
    <p className="text-red-600 text-base">{error}</p>
  </>
);

export const Dropdown = ({
  options,
  onChange,
  name,
  error,
  placeHolder,
  value,
  classNames,
}) => (
  <>
    <select
      value={value}
      name={name}
      onChange={(e) => onChange(e)}
      className={`brandInput ${classNames} ${
        error ? "ring-1 ring-red-600 border-none" : ""
      }`}
    >
      {placeHolder && (
        <option value={placeHolder} disabled>
          {placeHolder}
        </option>
      )}

      {options.map((option, index) => (
        <option
          value={
            typeof option === "object" && option.constructor === Object
              ? option.value
                ? option.value
                : option.label
              : option
          }
          key={index}
        >
          {typeof option === "object" && option.constructor === Object
            ? option.label
            : option}
        </option>
      ))}
    </select>
    <p className="text-red-600 text-base">{error}</p>
  </>
);

// search input
export const SearchInput = ({ classNames, value, onChange, placeholder }) => {
  return (
    <div
      className={`flex items-center bg-grey6 rounded-3xl px-6 py-3 flex-1 ${classNames}`}
    >
      <SearchIcon />
      <input
        type="text"
        value={value}
        onChange={(e) => onChange(e)}
        className="outline-none bg-transparent ml-3 text-grey2 font-normal text-sm w-full"
        placeholder={placeholder ? placeholder : "search"}
      />
    </div>
  );
};

export const CheckBoxGroup = ({
  onClick,
  state,
  name,
  label,
  disabled,
  readOnly,
}) => (
  <div className="checkbox-group" onClick={() => !disabled && onClick()}>
    <input
      type="checkbox"
      name={name}
      checked={state}
      onChange={() => !disabled && onClick()}
      readOnly={readOnly}
    />
    <label
      htmlFor={name}
      className={` text-base  ${state ? "font-semibold" : "font-medium"} ${
        disabled ? "" : "cursor-pointer"
      }`}
    >
      {label}
    </label>
  </div>
);

export const RadioButton = ({ onClick, state, disabled, label, readOnly }) => (
  <>
    <input
      type="radio"
      checked={state}
      onClick={() => !disabled && onClick && onClick()}
      readOnly={readOnly}
      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600"
    />
    <p className="text-grey2 font-normal text-base">{label}</p>
  </>
);
