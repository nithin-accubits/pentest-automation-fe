import { AccordionArrow } from "../../utilities/svg";
import { copyToClipBoard, truncateIds } from "./functional";

export const TableContainer = ({
  children,
  classNames,
  headers,
  headerClassNames,
}) => {
  return (
    <div
      className={`mt-6 p-3 border-1.5px border-grey5 rounded-14px ${classNames}`}
    >
      <TableHeader headers={headers} classNames={headerClassNames} />
      {children}
    </div>
  );
};

const TableHeader = ({ classNames, headers }) => {
  return (
    <div
      className={`hidden md:grid grid-cols-3 gap-3 py-3 text-grey2 font-bold text-sm whitespace-nowrap ${classNames}`}
    >
      {headers.map(({ name, classNames: itemClassNames }, index) => (
        <p key={index} className={`${itemClassNames}`}>
          {name}
        </p>
      ))}
    </div>
  );
};

export const TableBody = ({ classNames, data, onClick }) => {
  return (
    <div
      className={`hidden md:grid grid-cols-3 py-5 text-base text-grey1 font-normal border-t border-grey5 px-2 ${
        onClick ? "hover:shadow-listItem cursor-pointer transition1" : ""
      } ${classNames}`}
      onClick={() => onClick()}
    >
      {data.map(
        (
          {
            Value,
            copyValue,
            darkValue,
            classNames: itemClassNames,
            truncateValue,
          },
          index
        ) => (
          <div
            key={index}
            className={`${copyValue ? "overflow-hidden primaryHover" : ""}  ${
              darkValue ? "text-dark1 font-bold" : ""
            } ${itemClassNames}`}
            onClick={(e) => {
              if (copyValue) {
                e.stopPropagation();
                copyToClipBoard(Value);
              }
            }}
          >
            {truncateValue ? truncateIds(Value) : Value}
          </div>
        )
      )}
    </div>
  );
};

export const AccordionTable = ({
  index,
  id,
  openAccordion,
  setOpenAccordion,
  Name,
  nameIsComponent,
  accordionData,
}) => (
  <TableAccordion
    index={index}
    id={id}
    setOpenAccordion={setOpenAccordion}
    openAccordion={openAccordion}
  >
    <TableAccordionTop
      id={id}
      Name={Name}
      openAccordion={openAccordion}
      nameIsComponent={nameIsComponent}
    />
    {openAccordion === id && <TableAccordionBody data={accordionData} />}
  </TableAccordion>
);

const TableAccordion = ({
  children,
  classNames,
  index,
  id,
  setOpenAccordion,
  openAccordion,
}) => {
  return (
    <div
      className={`block md:hidden w-full py-5 cursor-pointer text-base text-grey1 font-normal hover:shadow-listItem px-5 ${
        index === 0 ? "border-none" : " border-t border-grey5"
      } ${classNames}`}
      onClick={() => {
        setOpenAccordion(openAccordion === id ? false : id);
      }}
    >
      {children}
    </div>
  );
};

const TableAccordionTop = ({ Name, id, openAccordion, nameIsComponent }) => {
  return (
    <div className="flexBetween w-full">
      {nameIsComponent ? (
        Name
      ) : (
        <>
          <div className="text-dark1 font-bold flex items-center ">{Name}</div>
          <AccordionArrow
            className={`transition1 ${
              openAccordion === id ? "rotate-180" : ""
            }`}
          />
        </>
      )}
    </div>
  );
};

const TableAccordionBody = ({ data }) => {
  return (
    <div className="flex flex-col gap-3 mt-6 animate-TopToBottom">
      {data.map(
        (
          { Title, Value, copyValue, darkValue, classNames, truncateValue },
          index
        ) => (
          <div key={index} className="flex items-center gap-4">
            <div className="text-grey2 font-bold text-xs">{Title}</div>
            <div
              className={`${copyValue ? "overflow-hidden primaryHover" : ""} ${
                darkValue ? "text-dark1 font-bold" : ""
              } ${classNames}`}
              onClick={(e) => {
                if (copyValue) {
                  e.stopPropagation();
                  copyToClipBoard(Value);
                }
              }}
            >
              {truncateValue ? truncateIds(Value) : Value}
            </div>
          </div>
        )
      )}
    </div>
  );
};

export const TableTopHeader = ({ title, RightSide }) => {
  return (
    <div className="bg-white flex sm:justify-between items-center mb-4 flex-col sm:flex-row">
      <h1 className="font-bold text-dark1 text-lg sm:text-2xl pb-4 sm:pb-0">
        {title}
      </h1>
      <div className="flex flex-col sm:flex-row gap-4 items-center">
        {RightSide}
      </div>
    </div>
  );
};
