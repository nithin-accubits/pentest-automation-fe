import { useCallback, useEffect, useRef } from "react";
import { toast } from "react-toastify";

import { CloudIcon } from "../../utilities/svg";

export const UploadFileContainer = ({
  setFormData,
  name,
  filesData,
  editPage,
  classNames,
  secondaryText = "Max size limit - 5MB",
}) => {
  const drop = useRef(null);

  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };

  //dropping file under the area
  const handleDrop = useCallback(
    (e) => {
      e.preventDefault();
      e.stopPropagation();

      const { files } = e.dataTransfer;

      setFormData((formData) => ({
        ...formData,
        [e.target.name]: [files],
      }));
    },
    [setFormData]
  );

  useEffect(() => {
    let dropvalue = drop.current;
    dropvalue.addEventListener("dragover", handleDragOver);
    dropvalue.addEventListener("drop", handleDrop);

    return () => {
      dropvalue.removeEventListener("dragover", handleDragOver);
      dropvalue.removeEventListener("drop", handleDrop);
    };
  }, [handleDrop]);

  const handleUploadImage = (e) => {
    const singleFile = e.target.files[0];

    const files = e.target.files;
    if (!singleFile) {
      return false;
    }
    //image validation
    if (singleFile.size > "5242880") {
      toast.info("Maximum file size - 5 MB");
      return false;
    }

    setFormData((formData) => ({
      ...formData,
      [e.target.name]: [files],
    }));
  };

  return (
    <label
      ref={drop}
      className={`px-4 my-2 rounded-md flexCenter flex-col primaryHover overflow-hidden ${
        editPage
          ? "text-white h-full bg-transparent"
          : "text-primary bg-white border border-dashed"
      } ${classNames}`}
      style={{
        borderColor: "#B3B2B8",
      }}
      htmlFor={`UploadFileContainer${name}`}
    >
      <CloudIcon className="stroke-current" />
      <p className={`font-normal text-sm py-2 ${editPage ? "" : "text-grey1"}`}>
        Drag & Drop files here
      </p>
      <p className={`font-normal text-xs ${editPage ? "" : "text-grey2"}`}>
        {secondaryText}
      </p>

      <input
        type="file"
        name={name}
        multiple={true}
        id={`UploadFileContainer${name}`}
        accept={"image/*"}
        onChange={(e) => handleUploadImage(e)}
        className="hidden w-full h-full"
      />

      {filesData[0] && (
        <p
          className={`border-2  text-center px-4 mt-1 animate-TopToBottom rounded-xl text-sm ${
            editPage
              ? "border-white text-white"
              : "border-primary text-primary "
          }`}
        >
          {filesData[0] &&
            filesData[0].length &&
            `${filesData[0].length} files`}
        </p>
      )}
    </label>
  );
};
