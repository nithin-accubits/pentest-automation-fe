/* eslint react/no-multi-comp:0, no-console:0 */

import "rc-calendar/assets/index.css";
import React from "react";
import PropTypes from "prop-types";
import Calendar from "rc-calendar";
import DatePicker from "rc-calendar/lib/Picker";
import zhCN from "rc-calendar/lib/locale/zh_CN";
import enUS from "rc-calendar/lib/locale/en_US";
import "rc-time-picker/assets/index.css";
import TimePickerPanel from "rc-time-picker/lib/Panel";

import moment from "moment";
import "moment/locale/zh-cn";
import "moment/locale/en-gb";
import { CalendarDarkIcon } from "../../utilities/svg";
import { BrandInput } from "./inputs";

const format = "YYYY-MM-DD HH:mm:ss";
const cn = window.location.search.indexOf("cn") !== -1;

const now = moment();
if (cn) {
  now.locale("zh-cn").utcOffset(8);
} else {
  now.locale("en-gb").utcOffset(0);
}

function getFormat(time) {
  return time ? format : "YYYY-MM-DD";
}

const defaultCalendarValue = now.clone();

const timePickerElement = (
  <TimePickerPanel defaultValue={moment("00:00:00", "HH:mm:ss")} />
);

class Demo extends React.Component {
  static propTypes = {
    defaultValue: PropTypes.object,
    defaultCalendarValue: PropTypes.object,
  };

  constructor(props) {
    super(props);

    this.calendarContainerRef = React.createRef();

    this.state = {
      showTime: true,
      showDateInput: true,
      disabled: false,
      open: false,
      value: props.defaultValue,
    };
  }

  onChange = (value) => {
    this.setState({
      value,
    });
    this.props.data.setFormData((formData) => ({
      ...formData,
      [this.props.data.name]: value && value.format("YYYY-MM-DD HH:mm"),
      // value && moment(value).local().format("YYYY-MM-DD HH:mm"),
    }));
    this.props.data.setFormError((formError) => ({
      ...formError,
      [this.props.data.name]: "",
    }));
  };

  onShowTimeChange = (e) => {
    this.setState({
      showTime: e.target.checked,
    });
  };

  onShowDateInputChange = (e) => {
    this.setState({
      showDateInput: e.target.checked,
    });
  };

  onOpenChange = (open) => {
    this.setState({
      open,
    });
  };

  onFocus = () => {
    if (!this.state.open && this.state.isMouseDown) {
      // focus from a "click" event, let the picker trigger automatically open the calendar
      this.setState({
        isMouseDown: false,
      });
    } else {
      // focus not caused by "click" (such as programmatic or via keyboard)
      this.setState({
        open: true,
      });
    }
  };

  onMouseDown = () => {
    this.setState({
      isMouseDown: true,
    });
  };

  getCalendarContainer = () => this.calendarContainerRef.current;

  toggleDisabled = () => {
    this.setState({
      disabled: !this.state.disabled,
    });
  };

  render() {
    const state = this.state;
    const {
      label,
      placeHolder,
      inputError,
      name,
      value: inputValue,
      disabled,
    } = this.props.data;
    const calendar = (
      <Calendar
        locale={cn ? zhCN : enUS}
        style={{ zIndex: 1001 }}
        dateInputPlaceholder="please input"
        format={getFormat(state.showTime)}
        // disabledTime={state.showTime ? disabledTime : null}
        timePicker={state.showTime ? timePickerElement : null}
        defaultValue={inputValue ? inputValue : this.props.defaultCalendarValue}
        showDateInput={state.showDateInput}
        // disabledDate={disabledDate}
        focusablePanel={false}
      />
    );
    return (
      <div className="mb-4">
        <p
          className={`text-dark1 font-medium text-sm mb-2 ${
            disabled ? "text-grey3" : ""
          }`}
        >
          {label}
        </p>
        <DatePicker
          animation="slide-up"
          calendar={calendar}
          value={state.value}
          onChange={this.onChange}
          getCalendarContainer={this.getCalendarContainer}
          onOpenChange={this.onOpenChange}
          open={state.open}
          style={{ zIndex: 1001 }}
          disabled={disabled}
        >
          {({ value }) => {
            // console.log(inputValue);
            return (
              <span
                tabIndex="0"
                onMouseDown={this.onMouseDown}
                onFocus={this.onFocus}
              >
                <BrandInput
                  placeholder={placeHolder}
                  Icon={<CalendarDarkIcon />}
                  value={
                    value
                      ? moment(value).format("YYYY-MM-DD HH:mm")
                      : inputValue &&
                        moment.utc(inputValue).format("YYYY-MM-DD HH:mm")
                  }
                  error={inputError}
                  name={name}
                  disabled={disabled}
                />

                <div ref={this.calendarContainerRef} />
              </span>
            );
          }}
        </DatePicker>
      </div>
    );
  }
}

export const SelectDateCalendar = ({ data }) => (
  <Demo defaultCalendarValue={defaultCalendarValue} data={data} />
);
