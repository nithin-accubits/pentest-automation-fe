import { useCallback, useEffect, useRef, useState } from "react";
import { toast } from "react-toastify";

import { CloudIcon } from "../../utilities/svg";

export const UploadFileContainer = ({
  setFormData,
  name,
  file,
  editPage,
  classNames,
  isCsvFile,
  secondaryText = "Max size limit - 5MB",
}) => {
  const [thumbnailUploadedName, setThumbnailUploadedName] = useState("");
  const drop = useRef(null);

  useEffect(() => {
    if (file) {
      setThumbnailUploadedName(file.name);
    }
  }, [file]);

  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };

  //dropping file under the area
  const handleDrop = useCallback(
    (e) => {
      e.preventDefault();
      e.stopPropagation();

      const { files } = e.dataTransfer;

      if (files && files.length) {
        let type = files[0].type.split("/").pop().toLowerCase();
        if (isCsvFile) {
          if (type === "csv") {
            setFormData((formData) => ({
              ...formData,
              [e.target.name]: files[0] ? files[0] : "",
            }));
            setThumbnailUploadedName(files[0] ? files[0]?.name : "");
          } else {
            toast.info("Please select a valid Csv file");
          }
        } else {
          if (
            type !== "jpeg" &&
            type !== "jpg" &&
            type !== "png" &&
            type !== "svg+xml"
          ) {
            toast.info("Please select a valid image file");
          } else {
            setFormData((formData) => ({
              ...formData,
              [e.target.name]: files[0] ? files[0] : "",
            }));
            setThumbnailUploadedName(files[0] ? files[0]?.name : "");
          }
        }
      }
    },
    [setFormData, isCsvFile]
  );

  useEffect(() => {
    let dropvalue = drop.current;
    dropvalue.addEventListener("dragover", handleDragOver);
    dropvalue.addEventListener("drop", handleDrop);

    return () => {
      dropvalue.removeEventListener("dragover", handleDragOver);
      dropvalue.removeEventListener("drop", handleDrop);
    };
  }, [handleDrop]);

  const handleUploadImage = (e) => {
    const file = e.target.files[0];
    if (!file) {
      return false;
    }
    //image validation
    if (file.size > "5242880") {
      toast.info("Maximum file size - 5 MB");
      return false;
    }

    var type = file?.type.split("/").pop().toLowerCase();

    if (isCsvFile) {
      if (type === "csv") {
        setFormData((formData) => ({
          ...formData,
          [e.target.name]: file ? file : "",
        }));
        setThumbnailUploadedName(file ? file?.name : "");
      } else {
        toast.info("Please select a valid Csv file");
      }
    } else {
      if (
        type !== "jpeg" &&
        type !== "jpg" &&
        type !== "png" &&
        type !== "svg+xml"
      ) {
        toast.info("Please select a valid image file");
      } else {
        setFormData((formData) => ({
          ...formData,
          [e.target.name]: file ? file : "",
        }));
        setThumbnailUploadedName(file ? file?.name : "");
      }
    }
  };

  return (
    <label
      ref={drop}
      className={`px-4 my-2 rounded-md flexCenter flex-col primaryHover overflow-hidden ${
        editPage
          ? "text-white h-full bg-transparent"
          : "text-primary bg-white border border-dashed"
      } ${classNames}`}
      style={{
        borderColor: "#B3B2B8",
      }}
      htmlFor={`UploadFileContainer${name}`}
    >
      <CloudIcon className="stroke-current" />
      <p className={`font-normal text-sm py-2 ${editPage ? "" : "text-grey1"}`}>
        Drag & Drop files here
      </p>
      <p className={`font-normal text-xs ${editPage ? "" : "text-grey2"}`}>
        {secondaryText}
      </p>

      <input
        type="file"
        name={name}
        id={`UploadFileContainer${name}`}
        accept={isCsvFile ? "csv" : "image/*"}
        onChange={(e) => handleUploadImage(e)}
        className="hidden w-full h-full"
      />

      {thumbnailUploadedName && (
        <div className="flexCenter mt-2">
          <p
            className={`border-2  text-center px-2 animate-TopToBottom rounded-xl text-sm ${
              editPage
                ? "border-white text-white"
                : "border-primary text-primary "
            }`}
          >
            {thumbnailUploadedName}
          </p>
        </div>
      )}
    </label>
  );
};
