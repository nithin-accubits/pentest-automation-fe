import { toast } from "react-toastify";
import config from "../../axios/configServer";
import { getToken } from "../../utilities/crypto";
import { PrimaryLogo } from "../../utilities/svg";

export const getUid = function () {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
};

export const alertUserForReload = (e) => {
  e.preventDefault();
  e.returnValue = "";
};

// progress loader for loading
export const ProgressLoader = () => {
  return (
    <div className="ipl-progress-indicator" id="ipl-progress-indicator">
      <div className="ipl-progress-indicator-head">
        <div className="first-indicator"></div>
        <div className="second-indicator"></div>
      </div>
      <div className="insp-logo-frame">
        {/* <PrimaryLogo className="mx-auto w-1/12" /> */}
      </div>
    </div>
  );
};

export const progressLoaderFunction = (
  // fake authentication Promise
  loadingFunction = function authenticate() {
    return new Promise((resolve) => setTimeout(resolve, 200));
  }
) => {
  loadingFunction().then(() => {
    const ele = document.getElementById("ipl-progress-indicator");
    if (ele) {
      // fade out
      ele.classList.add("available");
      setTimeout(() => {
        // remove from DOM
        ele.innerHTML = "";
      }, 200);
    }
  });
};

// scroll to top
export const scrollToTop = () => {
  let intervalId = 0;
  const scrollStep = () => {
    if (window.pageYOffset === 0) {
      clearInterval(intervalId);
    }
    window.scroll(0, window.pageYOffset - 50);
  };
  const scrollToTop = () => {
    let intervalId2 = setInterval(scrollStep.bind(this), 16.66);
    intervalId = intervalId2;
  };
  scrollToTop();
};

export const truncateAddress = (address) => {
  if (!address) return "No Account";
  const match = address.match(
    /^(0x[a-zA-Z0-9]{5})[a-zA-Z0-9]+([a-zA-Z0-9]{5})$/
  );
  if (!match) return address;
  return `${match[1]}…${match[2]}`;
};

export const truncateIds = (id) => {
  return `${id.slice(0, 7)}…${id.substring(id.length - 7)}`;
};

export const comingEventDate = (status, projectDetails) => {
  let comingDate;
  if (status?.name === "Coming Soon") {
    comingDate = projectDetails.whitelistWindowStartTime;
  } else if (status?.name === "Whitelisting Open") {
    comingDate = projectDetails.whitelistWindowEndTime;
  } else if (status?.name === "Whitelisting Close") {
    comingDate = projectDetails.whitelistSaleDateStartR1;
  } else if (status?.name === "Whitelist Round 1 LIVE") {
    comingDate = projectDetails.whitelistSaleDateEndR1;
  } else if (status?.name === "Whitelist Round 1 CLOSED") {
    comingDate = projectDetails.whitelistSaleDateStartR2;
  } else if (status?.name === "Whitelist Round 2 LIVE") {
    comingDate = projectDetails.whitelistSaleDateEndR2;
  }

  return comingDate;
};

export const downloadCsvFile = async (path, showDownloaderLoader, fileName) => {
  function download(blob, filename) {
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.style.display = "none";
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    showDownloaderLoader(false);
  }
  const env = process.env.NODE_ENV || "development";

  fetch(`${config[env].BASE_API}/${path}`, {
    headers: {
      Authorization: `Bearer ${getToken().token}`,
    },
  })
    .then((response) => {
      return response.blob();
    })
    .then((blob) => {
      download(blob, fileName);
    })
    .catch((error) => {
      console.error(error);
    });
};

export function dataURLtoBlob(dataurl) {
  var arr = dataurl.split(","),
    mime = arr[0].match(/:(.*?);/)[1],
    bstr = atob(arr[1]),
    n = bstr.length,
    u8arr = new Uint8Array(n);
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }
  return new Blob([u8arr], { type: mime });
}

export function copyToClipBoard(data) {
  navigator.clipboard.writeText(data);
  toast.success("Copied to clipboard");
  setTimeout(() => {
    toast.clearWaitingQueue();
  }, 2000);
}
