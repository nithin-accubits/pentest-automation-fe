import axios from "axios";
import Promise from "promise";
import { toast } from "react-toastify";
import { getToken } from "../utilities/crypto";
import config from "./configServer";
const env = process.env.NODE_ENV || "development";

const http = axios.create({
  baseURL: config[env].BASE_API,
});

http.interceptors.request.use(
  function (config) {
    if (getToken()) {
      let { token } = getToken();
      console.log(token);
      if (token) {
        config.headers.Authorization = `${token}`;
      }
    }
    return config;
  },
  function (error) {
    return Promise.resolve({ error });
  }
);

http.interceptors.response.use(
  (response) => {
    return response;
  },
  (err) => {
    return new Promise(function (resolve, reject) {
      if (err.response && err.response.status === 403) {
        console.error(err.response.data.error);
        localStorage.clear();
        setTimeout(() => {
          window.location.replace("/");
        });
        return false;
      } else if (err.response && err.response.status === 404) {
        console.error("Invalid Endpoint. Try again");
        return false;
      } else if (err.response && err.response.status === 500) {
        console.error("Internal Server Error");
        toast.error(err.response.data?.message);
        return false;
      } else if (err.response && err.response.status === 401) {
        // if (err.response.data.message === "Invalid token " || "Unauthorized ") {
        //   localStorage.removeItem("at");
        //   localStorage.removeItem("cr");
        //   setTimeout(() => {
        //     window.location.replace("/");
        //   });
        //   return false;
        // }
      } else if (
        (typeof err === "object" || typeof err === "function") &&
        err !== null
      ) {
        console.error(
          err.response.data.message
            ? err.response.data.message
            : "Something went wrong!, Try again"
        );
        if (!err.response) {
          return false;
        }
      }

      throw err;
    });
  }
);

export default http;
