import {
  ADMIN_LOGIN_BEGIN,
  ADMIN_LOGIN_SUCCESS,
  ADMIN_LOGIN_FAILURE,
  RESET_ADMIN_LOGIN,
  RESET_PASSWORD_LINK_SEND_BEGIN,
  RESET_PASSWORD_LINK_SEND_SUCCESS,
  RESET_PASSWORD_LINK_SEND_FAILURE,
  RESET_RESET_PASSWORD_LINK_SEND,
  RESET_ADMIN_PASSWORD_BEGIN,
  RESET_ADMIN_PASSWORD_SUCCESS,
  RESET_ADMIN_PASSWORD_FAILURE,
  RESET_RESET_ADMIN_PASSWORD,
  ADMIN_LOGOUT_BEGIN,
  ADMIN_LOGOUT_SUCCESS,
  ADMIN_LOGOUT_FAILURE,
  RESET_ADMIN_LOGOUT,
  ADMIN_TOKEN_VERIFY_BEGIN,
  ADMIN_TOKEN_VERIFY_SUCCESS,
  ADMIN_TOKEN_VERIFY_FAILURE,
  RESET_ADMIN_TOKEN_VERIFY,
  GET_NOTIFICATION_BEGIN,
  GET_NOTIFICATION_SUCCESS,
  GET_NOTIFICATION_FAILURE,
  RESET_GET_NOTIFICATION,
  READ_NOTIFICATION_BEGIN,
  READ_NOTIFICATION_SUCCESS,
  READ_NOTIFICATION_FAILURE,
  RESET_READ_NOTIFICATION,
  GET_LOCK_PERIOD_BEGIN,
  GET_LOCK_PERIOD_SUCCESS,
  GET_LOCK_PERIOD_FAILURE,
  RESET_GET_LOCK_PERIOD,
  UPDATE_LOCK_PERIOD_BEGIN,
  UPDATE_LOCK_PERIOD_SUCCESS,
  UPDATE_LOCK_PERIOD_FAILURE,
  RESET_UPDATE_LOCK_PERIOD,
  CLOSE_PROJECT_BEGIN,
  CLOSE_PROJECT_SUCCESS,
  CLOSE_PROJECT_FAILURE,
  RESET_CLOSE_PROJECT,
} from "../constants/Admin";

import http from "../../axios/httpUser";

//admin login
export function adminLogin(data) {
  return (dispatch) => {
    dispatch({
      type: ADMIN_LOGIN_BEGIN,
    });

    const promise = new Promise((resolve, reject) => {
      let doRequest = http.post(`/auth/login`, data);

      doRequest.then(
        (res) => {
          dispatch({
            type: ADMIN_LOGIN_SUCCESS,
            data: res.data,
          });
          dispatch({
            type: RESET_ADMIN_LOGIN,
          });

          resolve(res);
        },
        (err) => {
          dispatch({
            type: ADMIN_LOGIN_FAILURE,
            data: err.response.data,
          });
          dispatch({
            type: RESET_ADMIN_LOGIN,
          });

          reject(err);
        }
      );
    });

    return promise;
  };
}

export function sendPasswordResetLink(data) {
  return (dispatch) => {
    dispatch({
      type: RESET_PASSWORD_LINK_SEND_BEGIN,
    });

    const promise = new Promise((resolve, reject) => {
      let doRequest = http.post(`/admin/password-reset`, data);

      doRequest.then(
        (res) => {
          dispatch({
            type: RESET_PASSWORD_LINK_SEND_SUCCESS,
            data: res.data,
          });
          dispatch({
            type: RESET_RESET_PASSWORD_LINK_SEND,
          });

          resolve(res);
        },
        (err) => {
          dispatch({
            type: RESET_PASSWORD_LINK_SEND_FAILURE,
            data: err.response.data,
          });
          dispatch({
            type: RESET_RESET_PASSWORD_LINK_SEND,
          });

          reject(err);
        }
      );
    });

    return promise;
  };
}

export function ResetAdminPassword(data, token) {
  return (dispatch) => {
    dispatch({
      type: RESET_ADMIN_PASSWORD_BEGIN,
    });

    const promise = new Promise((resolve, reject) => {
      let doRequest = http.put(`/admin/password-reset?token=${token}`, data);

      doRequest.then(
        (res) => {
          dispatch({
            type: RESET_ADMIN_PASSWORD_SUCCESS,
            data: res.data,
          });
          dispatch({
            type: RESET_RESET_ADMIN_PASSWORD,
          });

          resolve(res);
        },
        (err) => {
          dispatch({
            type: RESET_ADMIN_PASSWORD_FAILURE,
            data: err.response.data,
          });
          dispatch({
            type: RESET_RESET_ADMIN_PASSWORD,
          });

          reject(err);
        }
      );
    });

    return promise;
  };
}

export function AdminLogout() {
  return (dispatch) => {
    dispatch({
      type: ADMIN_LOGOUT_BEGIN,
    });

    const promise = new Promise((resolve, reject) => {
      let doRequest = http.post(`/auth/logout`);

      doRequest.then(
        (res) => {
          dispatch({
            type: ADMIN_LOGOUT_SUCCESS,
            data: res.data,
          });
          dispatch({
            type: RESET_ADMIN_LOGOUT,
          });

          resolve(res);
        },
        (err) => {
          dispatch({
            type: ADMIN_LOGOUT_FAILURE,
            data: err.response.data,
          });
          dispatch({
            type: RESET_ADMIN_LOGOUT,
          });

          reject(err);
        }
      );
    });

    return promise;
  };
}

export function verifyAdminToken() {
  return (dispatch) => {
    dispatch({
      type: ADMIN_TOKEN_VERIFY_BEGIN,
    });

    const promise = new Promise((resolve, reject) => {
      let doRequest = http.get(`/admin/token/verify`);

      doRequest.then(
        (res) => {
          dispatch({
            type: ADMIN_TOKEN_VERIFY_SUCCESS,
            data: res.data,
          });
          dispatch({
            type: RESET_ADMIN_TOKEN_VERIFY,
          });

          resolve(res);
        },
        (err) => {
          dispatch({
            type: ADMIN_TOKEN_VERIFY_FAILURE,
            data: err.response.data,
          });
          dispatch({
            type: RESET_ADMIN_TOKEN_VERIFY,
          });

          reject(err);
        }
      );
    });

    return promise;
  };
}

//get notification
export function getAdminNotification(pagenum = 1) {
  return (dispatch) => {
    dispatch({
      type: GET_NOTIFICATION_BEGIN,
    });

    const promise = new Promise((resolve, reject) => {
      let doRequest = http.get(`admin/notification?page=${pagenum}&limit=10`);

      doRequest.then(
        (res) => {
          dispatch({
            type: GET_NOTIFICATION_SUCCESS,
            data: res.data,
          });
          dispatch({
            type: RESET_GET_NOTIFICATION,
          });

          resolve(res);
        },
        (err) => {
          dispatch({
            type: GET_NOTIFICATION_FAILURE,
            data: err.response.data,
          });
          dispatch({
            type: RESET_GET_NOTIFICATION,
          });

          reject(err);
        }
      );
    });

    return promise;
  };
}

//get notification
export function readAdminNotification() {
  return (dispatch) => {
    dispatch({
      type: READ_NOTIFICATION_BEGIN,
    });

    const promise = new Promise((resolve, reject) => {
      let doRequest = http.put(`admin/notification`);

      doRequest.then(
        (res) => {
          dispatch({
            type: READ_NOTIFICATION_SUCCESS,
            data: res.data,
          });
          dispatch({
            type: RESET_READ_NOTIFICATION,
          });

          resolve(res);
        },
        (err) => {
          dispatch({
            type: READ_NOTIFICATION_FAILURE,
            data: err.response.data,
          });
          dispatch({
            type: RESET_READ_NOTIFICATION,
          });

          reject(err);
        }
      );
    });

    return promise;
  };
}

//get lock period data
export function getLockPeriodData() {
  return (dispatch) => {
    dispatch({
      type: GET_LOCK_PERIOD_BEGIN,
    });

    const promise = new Promise((resolve, reject) => {
      let doRequest = http.get(`admin/config/stake`);

      doRequest.then(
        (res) => {
          dispatch({
            type: GET_LOCK_PERIOD_SUCCESS,
            data: res.data,
          });
          dispatch({
            type: RESET_GET_LOCK_PERIOD,
          });

          resolve(res);
        },
        (err) => {
          dispatch({
            type: GET_LOCK_PERIOD_FAILURE,
            data: err.response.data,
          });
          dispatch({
            type: RESET_GET_LOCK_PERIOD,
          });

          reject(err);
        }
      );
    });

    return promise;
  };
}

//Update lock period data
export function updateLockPeriodData(data) {
  return (dispatch) => {
    dispatch({
      type: UPDATE_LOCK_PERIOD_BEGIN,
    });

    const promise = new Promise((resolve, reject) => {
      let doRequest = http.put(`admin/config/stake`, data);

      doRequest.then(
        (res) => {
          dispatch({
            type: UPDATE_LOCK_PERIOD_SUCCESS,
            data: res.data,
          });
          dispatch({
            type: RESET_UPDATE_LOCK_PERIOD,
          });

          resolve(res);
        },
        (err) => {
          dispatch({
            type: UPDATE_LOCK_PERIOD_FAILURE,
            data: err.response.data,
          });
          dispatch({
            type: RESET_UPDATE_LOCK_PERIOD,
          });

          reject(err);
        }
      );
    });

    return promise;
  };
}

//Close project IDO
export function closeProjectIDO(projectId, data) {
  return (dispatch) => {
    dispatch({
      type: CLOSE_PROJECT_BEGIN,
    });

    const promise = new Promise((resolve, reject) => {
      let doRequest = http.put(`project/${projectId}/close`, data);

      doRequest.then(
        (res) => {
          dispatch({
            type: CLOSE_PROJECT_SUCCESS,
            data: res.data,
          });
          dispatch({
            type: RESET_CLOSE_PROJECT,
          });

          resolve(res);
        },
        (err) => {
          dispatch({
            type: CLOSE_PROJECT_FAILURE,
            data: err.response.data,
          });
          dispatch({
            type: RESET_CLOSE_PROJECT,
          });

          reject(err);
        }
      );
    });

    return promise;
  };
}
